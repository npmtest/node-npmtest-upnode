{"/home/travis/build/npmtest/node-npmtest-upnode/test.js":"/* istanbul instrument in package npmtest_upnode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-upnode/lib.npmtest_upnode.js":"/* istanbul instrument in package npmtest_upnode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_upnode = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_upnode = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-upnode/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-upnode && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_upnode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_upnode\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_upnode.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_upnode.rollup.js'] =\n            local.assetsDict['/assets.npmtest_upnode.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_upnode.__dirname + '/lib.npmtest_upnode.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-upnode/node_modules/upnode/index.js":"var dnode = require('dnode');\nvar parseArgs = require('dnode/lib/parse_args');\nvar net = require('net');\nvar EventEmitter = require('events').EventEmitter;\n\nvar serverHandle = require('./lib/server_handle');\n\nvar upnode = module.exports = function (cons) {\n    var self = {};\n    self.connect = function () {\n        var args = [].slice.call(arguments);\n        var up = createConnectionUp();\n        if (!self._ups) self._ups = [];\n        self._ups.push(up);\n        return connect.apply(null, [ up, cons ].concat(args));\n    };\n    \n    self.writable = true;\n    self.readable = true;\n    \n    var names = Object.keys(EventEmitter.prototype).concat(\n        'pipe', 'write', 'end', 'destroy'\n    );\n    names.forEach(function (name) {\n        self[name] = function (buf) {\n            var h = self._serverHandle;\n            if (!h) h = self._serverHandle = serverHandle(cons);\n            return h[name].apply(h, arguments);\n        };\n    });\n    \n    self.listen = function () {\n        var args = parseArgs(arguments);\n        \n        var server = net.createServer();\n        server._ds = [];\n        \n        server.on('connection', function (stream) {\n            var d = serverHandle(cons);\n            d.stream = stream;\n            d.pipe(stream).pipe(d);\n            \n            server._ds.push(d);\n            d.once('done', function () {\n                var ix = server._ds.indexOf(d);\n                if (ix >= 0) server._ds.splice(ix, 1);\n            });\n        });\n        \n        if (args.port) {\n            server.listen(args.port, args.host, args.block);\n        }\n        else if (args.path) {\n            server.listen(args.path, args.block);\n        }\n        else throw new Error(\"no port or path given to .listen()\");\n        \n        if (!self.close) {\n            self._servers = [];\n            self.close = function () {\n                self._closed = true;\n                self._servers.forEach(function (s) {\n                    if (!s._closed) s.close();\n                    s._closed = true;\n                });\n            };\n        }\n        self._servers.push(server);\n        \n        if (!server.end) server.end = function () {\n            (self._servers || []).forEach(function (server) {\n                (server._ds || []).forEach(function (c) {\n                    c.destroy();\n                });\n            });\n        };\n        \n        self.end = function () {\n            if (!self._closed) self.close();\n            \n            (self._servers || []).forEach(function (server) {\n                server.end();\n            });\n            (self._ups || []).forEach(function (up) {\n                up.end();\n            });\n        };\n        \n        return server;\n    };\n    \n    return self;\n};\n\nfunction createConnectionUp () {\n    var up = function (t, fn) {\n        if (typeof t === 'function') {\n            fn = t;\n            t = 0;\n        }\n        \n        if (up.remote) fn(up.remote, up.conn)\n        else if (t) {\n            var f = function () {\n                clearTimeout(to);\n                fn.apply(null, arguments);\n            };\n            var to = setTimeout(function () {\n                var ix = up.queue.indexOf(f);\n                if (ix >= 0) up.queue.splice(ix, 1);\n                fn();\n            }, t);\n            up.queue.push(f);\n        }\n        else up.queue.push(fn)\n    };\n    up.conn = null;\n    up.remote = null;\n    up.queue = [];\n    \n    up.close = function () {\n        up.closed = true;\n        if (up.conn) up.conn.end();\n        up.emit('close');\n    };\n    var emitter = new EventEmitter;\n    Object.keys(EventEmitter.prototype).forEach(function (name) {\n        if (typeof emitter[name] === 'function') {\n            up[name] = emitter[name].bind(emitter);\n        }\n        else up[name] = emitter[name];\n    });\n    \n    return up;\n}\n\nupnode.connect = function () {\n    return upnode({}).connect.apply(null, arguments);\n};\n\nupnode.listen = function () {\n    return upnode({}).listen.apply(null, arguments);\n};\n\nfunction connect (up, cons) {\n    if (up.closed) return;\n    \n    var opts = parseArgs([].slice.call(arguments, 2));\n    var reconnect = (function (args) {\n        return function () {\n            up.emit('reconnect');\n            connect.apply(null, args);\n        };\n    })(arguments);\n    \n    var cb = opts.block || function (remote, conn) {\n        conn.emit('up', remote);\n    };\n    \n    if (opts.ping === undefined) opts.ping = 10000;\n    if (opts.timeout === undefined) opts.timeout = 5000;\n    if (opts.reconnect === undefined) opts.reconnect = 1000;\n    if (opts.createStream === undefined) {\n        opts.createStream = function () {\n            return net.connect(opts.port, opts.host);\n        }\n    }\n    \n    var client = dnode(function (remote, conn) {\n        var res = cons || {};\n        if (typeof cons === 'function') {\n            res = cons.call(this, remote, conn);\n            if (res === undefined) res = this;\n        }\n        \n        if (!res) res = {};\n        if (!res.ping) res.ping = function (cb) {\n            if (typeof cb === 'function') cb();\n        };\n        \n        return res;\n    });\n    \n    client.once('up', function (r) {\n        up.remote = r;\n        up.queue.forEach(function (fn) { fn(up.remote, up.conn) });\n        up.queue = [];\n        up.emit('up', r);\n    });\n    \n    client.on('remote', function (remote) {\n        up.conn = client;\n        if (opts.ping && typeof remote.ping !== 'function') {\n            up.emit('error', new Error(\n                'Remote does not implement ping. '\n                + 'Add server.use(require(\\'upnode\\').ping) to the remote.'\n            ));\n        }\n        else if (opts.ping) {\n            pinger = setInterval(function () {\n                var t0 = Date.now();\n                var to = opts.timeout && setTimeout(function () {\n                    clearInterval(pinger);\n                    if (up.conn) up.conn.end();\n                    stream.destroy();\n                }, opts.timeout);\n                \n                remote.ping(function () {\n                    var elapsed = Date.now() - t0;\n                    if (to) clearTimeout(to);\n                    up.emit('ping', elapsed);\n                });\n            }, opts.ping);\n        }\n    });\n    \n    var alive = true;\n    var onend = function () {\n        var isUp = Boolean(up.conn);\n        up.conn = null;\n        up.remote = null;\n        up.stream = null;\n        stream.destroy();\n        \n        if (alive && !up.closed) setTimeout(reconnect, opts.reconnect);\n        if (pinger) clearInterval(pinger);\n        alive = false;\n        if (isUp) up.emit('down');\n    };\n    var pinger = null;\n    \n    client.on('remote', function (remote) {\n        up.emit('remote', remote, client);\n        up.stream = stream;\n        cb.call(this, remote, client);\n    });\n    var stream = opts.createStream();\n    client.stream = stream;\n    stream.pipe(client).pipe(stream);\n    \n    stream.on('error', onend);\n    stream.on('end', onend);\n    stream.on('close', onend);\n    \n    client.on('error', onend);\n    \n    return up;\n}\n","/home/travis/build/npmtest/node-npmtest-upnode/node_modules/upnode/lib/server_handle.js":"var dnode = require('dnode');\n\nmodule.exports = function (cons) {\n    var d = dnode(cons);\n    \n    d.on('local', function (local) {\n        if (local.ping === undefined) {\n            local.ping = function (cb) {\n                if (typeof cb === 'function') cb();\n            };\n        }\n    });\n    \n    d.on('remote', function (remote) {\n        var iv = setInterval(function () {\n            if (typeof remote.ping === 'function') {\n                var to = setTimeout(function () {\n                    d.end();\n                }, 10 * 10000);\n                \n                remote.ping(function () {\n                    clearTimeout(to);\n                });\n            }\n        }, 10 * 1000);\n        \n        var onend = function () {\n            stream.destroy();\n            clearInterval(iv);\n            \n            if (!d._done) {\n                d._done = true;\n                d.emit('done');\n            }\n        };\n        \n        stream.once('end', onend);\n        stream.once('disconnect', onend);\n        stream.once('close', onend);\n        stream.once('error', onend);\n    });\n    \n    var stream;\n    d.on('pipe', function (target) {\n        if (!stream) stream = target;\n    });\n    \n    return d;\n}\n"}